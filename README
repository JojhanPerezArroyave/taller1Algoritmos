# Proyecto de Análisis y Diseño de Algoritmos

Este proyecto implementa algoritmos en Python para el análisis y procesamiento de datos provenientes de canales de comunicación. Utiliza la biblioteca `tabulate` para generar tablas formateadas y facilitar la visualización de resultados.

## Contenido del Proyecto

1. **`main.py`**: Contiene el código principal para el análisis de los canales de comunicación.
2. **`canales.txt`**: Archivo de entrada que contiene datos de los canales de comunicación. Cada línea representa un canal, y los valores están separados por espacios.

## Funciones Principales

### `estadosExistentes(canales: dict) -> list`

Devuelve una lista de los estados existentes en los canales de comunicación en un instante de tiempo determinado.

### `frecuenciaEstados(canales: dict, estados: list) -> dict`

Calcula la frecuencia de ocurrencia de estados en los canales de comunicación en un instante de tiempo determinado.

### `frecuenciaEstadosSiguientes(canales: dict, estados: list) -> dict`

Calcula la frecuencia de ocurrencia de estados siguientes en los canales de comunicación.

### `probabilidades(frecuenciaEstados: dict, frecuenciaEstadosSiguientes: dict) -> dict`

Calcula las probabilidades condicionales de transición entre estados.

### `probabilidadesEstadosSiguientes(canales: dict, estados: list) -> dict`

Calcula las probabilidades de transición entre estados en los canales de comunicación.

### `generateTable1(data: dict, headers: list) -> str`

Genera una tabla formateada a partir de un diccionario de datos y una lista de encabezados.

### `distribucionEstado(probabilidades: dict, estado: str) -> list`

Dado el diccionario de probabilidades de estados siguientes, retorna las probabilidades de un estado dado.

### `distribucionCanal(probabilidades: dict, canal: int) -> dict`

Calcula la distribución de un canal específico a partir de un diccionario de probabilidades de transición.

### `matrizDistribucionCanal(distribucion: dict) -> list`

Dado el diccionario de distribuciones de un canal dado un estado actual, convierte la distribución en una matriz.

### `distribucion_sistema_partido(probabilidades: dict, canales_futuros: list, canales_actuales: list) -> dict`

Calcula la distribución del sistema de partidos políticos a partir de probabilidades de transición.

## Uso

1. Asegúrate de tener instalados los paquetes instalados en requirements.txt:

    ```bash
    pip install -r requirements.txt
    ```

2. Ejecuta el archivo `main.py` para obtener los resultados del análisis de los canales de comunicación.

## Archivo de Entrada (`canales.txt`)

El archivo `canales.txt` contiene los datos de los canales de comunicación. Cada línea representa un canal, y los valores están separados por espacios. Asegúrate de proporcionar datos válidos para un análisis preciso.

